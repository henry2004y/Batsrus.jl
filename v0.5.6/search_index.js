var documenterSearchIndex = {"docs":
[{"location":"man/manual/#Examples-1","page":"Manual","title":"Examples","text":"","category":"section"},{"location":"man/manual/#IDL-format-output-loader-1","page":"Manual","title":"IDL format output loader","text":"","category":"section"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"Read data","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"file = \"1d_bin.out\";\nbd = load(file);\nbd = load(file, verbose=true);\nbd = load(file, npict=1);","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"3D structured spherical coordinates","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"file = \"3d_structured.out\";\nbd = load(file, verbose=false);","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"log file","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"logfilename = \"shocktube.log\";\nhead, data = readlogdata(logfilename)","category":"page"},{"location":"man/manual/#Data-Extraction-1","page":"Manual","title":"Data Extraction","text":"","category":"section"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"Raw variables","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"œÅ = getvar(bd, \"rho\")\nbd[\"rho\"]","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"Derived variables","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"v = getvars(bd, [\"Bx\", \"By\", \"Bz\"])\nBmag = bd[\"Bmag\"]","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"Here is a full list of predefined derived quantities:","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"Derived variable name Meaning Required variable\nB2 magnetic field magnitude squared Bx, By, Bz\nE2 electric field magnitude squared Ex, Ey, Ez\nU2 velocity magnitude squared Ux, Uy, Uz\nBmag magnetic field magnitude Bx, By, Bz\nEmag electric field magnitude Ex, Ey, Ez\nUmag velocity magnitude Ux, Uy, Uz\nB magnetic field vector Bx, By, Bz\nE electric field vector Ex, Ey, Ez\nU velocity vector Ux, Uy, Uz","category":"page"},{"location":"man/manual/#Output-format-conversion-1","page":"Manual","title":"Output format conversion","text":"","category":"section"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"We can convert 2D/3D BATSRUS outputs *.dat to VTK formats. It uses the VTK XML format writer writeVTK to generate files for Paraview and Tecplot. The default converted filename is out.vtu.","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"ASCII Tecplot file (supports both tec and tcp) and binary Tecplot file (set DOSAVETECBINARY=TRUE in BATSRUS PARAM.in):","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"file = \"x=0_mhd_1_n00000050.dat\"\nhead, data, connectivity = readtecdata(file)\nconvertTECtoVTU(head, data, connectivity)","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"3D structured IDL file (gridType=1 returns rectilinear vtr file, gridType=2 returns structured vts file):","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"file = \"3d_structured.out\"\nconvertIDLtoVTK(file, gridType=1)","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"3D unstructured IDL file together with header and tree file:","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"filetag = \"3d_var_1_n00002500\"\nconvertIDLtoVTK(filetag)","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"note: Note\nThe file suffix should not be provided for this to work correctly!","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"Multiple files:","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"using Batsrus, Glob\nfilenamesIn = \"3d*.dat\"\ndir = \".\"\nfilenames = Vector{String}(undef, 0)\nfilesfound = glob(filenamesIn, dir)\nfilenames = vcat(filenames, filesfound)\ntec = readtecdata.(filenames) # head, data, connectivity\nfor (i, outname) in enumerate(filenames)\n   convertTECtoVTU(tec[i][1], tec[i][2], tec[i][3], outname[1:end-4])\nend","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"If each individual file size is large, consider using:","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"using Batsrus, Glob\nfilenamesIn = \"3d*.dat\"\ndir = \".\"\nfilenames = Vector{String}(undef, 0)\nfilesfound = glob(filenamesIn, dir)\nfilenames = vcat(filenames, filesfound)\nfor (i, outname) in enumerate(filenames)\n   head, data, connectivity = readtecdata(outname)\n   convertTECtoVTU(head, data, connectivity, outname[1:end-4])\nend","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"Multiple files in parallel:","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"using Distributed\n@everywhere using Batsrus, Glob\n\nfilenamesIn = \"cut*.dat\"\ndir = \".\"\nfilenames = Vector{String}(undef, 0)\nfilesfound = glob(filenamesIn, dir)\nfilenames = vcat(filenames, filesfound)\n\n@sync @distributed for outname in filenames\n   println(\"filename=$(outname)\")\n   head, data, connectivity = readtecdata(outname)\n   convertTECtoVTU(head, data, connectivity, outname[1:end-4])\nend","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"More examples can be found in examples.","category":"page"},{"location":"man/manual/#HDF-format-output-loader-1","page":"Manual","title":"HDF format output loader","text":"","category":"section"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"filename = \"3d__var_1_n00006288.h5\"\nfile = BatsrusHDF5Uniform(filename)","category":"page"},{"location":"man/manual/#Field-extraction-1","page":"Manual","title":"Field extraction","text":"","category":"section"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"Variables within a box region can be extracted as following:","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"out, (xl_new, yl_new, zl_new), (xu_new, yu_new, zu_new) =\n   extract_field(file, \"bx\"; xmin, xmax, ymin, ymax, zmin, zmax)","category":"page"},{"location":"man/manual/#Data-visualization-1","page":"Manual","title":"Data visualization","text":"","category":"section"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"We provide plot recipes for Plots.jl, Makie.jl, and wrappers for PyPlot.jl.","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"The recipes for Plots.jl and Makie.jl will work on all kinds of plots given the correct dimensions, e.g.","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"using Plots\nplot(bd, \"p\")\ncontourf(bd, \"Mx\", xlabel=\"x\")","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"See the official documentation for Plots.jl for more information.","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"On the other hand, most common 1D and 2D plotting functions are wrapped over their Matplotlib equivalences through PyPlot.jl. To trigger the wrapper, using PyPlot. Check out the documentation for more details.","category":"page"},{"location":"man/manual/#Quick-exploration-of-data-1","page":"Manual","title":"Quick exploration of data","text":"","category":"section"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"A general plotdata function is provided for quick visualizations using Matplotlib.","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"1D binary","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"plotdata(bd, \"p\", plotmode=\"line\")\nplotdata(bd, \"p\", plotmode=\"linegrid\")","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"2D Cartesian (structured)","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"plotdata(bd, \"p bx;by\", plotmode=\"contbar streamover\")\nplotdata(bd, \"p bx;by\", plotmode=\"contbar quiverover\")\nplotdata(bd, \"p bx;by\", plotmode=\"contbar streamover\", density=2.0)\nplotdata(bd, \"p\", plotmode=\"grid\")\nplotdata(bd, \"p\", plotmode=\"contbar\", plotrange=[-50., 50., -1., 1.])\nplotdata(bd, \"p\", plotmode=\"contbar\")\nplotdata(bd, \"p\", plotmode=\"contbarlog\")\nplotdata(bd, \"p\", plotmode=\"surfbar\")","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"2D unstructured","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"plotdata(bd, \"rho\", plotmode=\"contbar\")\nplotdata(bd, \"rho\", plotmode=\"trimesh\")\nplotdata(bd, \"rho\", plotmode=\"tricont\")","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"2D structured spherical coordinates","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"plotdata(bd, \"rho\", plotmode=\"contbar\")","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"3D box","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"plotdata(bd, \"bx\", plotmode=\"contbar\", dir=\"y\", sequence=1, level=20)\nplotdata(bd, \"bx\", plotmode=\"contbar\", dir=\"y\", plotrange=[-1.4,-1.1,0.70,0.78])\nusing PyPlot\nplt.axis(\"scaled\")\n\nsubplot(2,2,(1,3))\ncutplot(bd, \"Ex\"; dir=\"y\", sequence=128, plotrange)","category":"page"},{"location":"man/manual/#Finding-indexes-1","page":"Manual","title":"Finding indexes","text":"","category":"section"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"To get the index of a certain quantity, e.g. electron number density","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"œÅe_= findfirst(x->x==\"rhoS0\", bd.head.wnames)","category":"page"},{"location":"man/manual/#Multiple-dispatch-for-Matplotlib-functions-1","page":"Manual","title":"Multiple dispatch for Matplotlib functions","text":"","category":"section"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"Using the same plotting functions as in Matplotlib is allowed, and actually recommended. Some plotting functions can be directly called as shown below, which allows for more control from the user. using PyPlot to import the full capability of the package, etc. adding colorbar, changing line colors, setting colorbar range with clim.","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"line plot","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"plot(bd, \"p\", linewidth=2, color=\"green\")\nc = plot(bd, \"p\")\nplt.setp(c, linestyle=\"--\", linewidth=2);","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"scatter plot","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"scatter(bd, \"p\")","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"contour","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"# 2D contour\ncontour(bd, \"p\")","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"filled contour","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"contourf(bd, \"p\")\ncontourf(bd, \"p\", levels, plotrange=[-10,10,-Inf,Inf], plotinterval=0.1)","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"surface plot","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"plot_surface(bd, \"p\")","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"triangle surface plot","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"plot_trisurf(bd, \"p\")","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"triangle filled contour plot","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"tricontourf(bd, \"p\")","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"streamline","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"streamplot(bd, \"bx;bz\")\nstreamplot(bd, \"bx;bz\", density=2.0, color=\"k\", plotinterval=1.0, plotrange=[-10,10,-Inf,Inf])","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"quiver (currently only for Cartesian grid)","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"quiver(bd, \"ux;uy\", stride=50)","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"streamline + contourf","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"using Batsrus, PyPlot\n\nfile = \"y.out\"\nbd = load(file)\n\nDN = matplotlib.colors.DivergingNorm\nset_cmap(\"RdBu_r\")\n\ncontourf(bd, \"uxS0\", 50, plotrange=[-3,3,-3,3], plotinterval=0.05, norm=DN(0))\ncolorbar()\nstreamplot(bd, \"uxS0;uzS0\", density=2.0, color=\"g\", plotrange=[-3,3,-3,3])\nxlabel(\"x\"); ylabel(\"y\"); title(\"Ux [km/s]\")\n\ncontourf(bd,\"uxS0\", 50, plotinterval=0.05, norm=DN(0))\ncolorbar()\naxis(\"scaled\")\nxlabel(\"x\"); ylabel(\"y\"); title(\"uxS0\")","category":"page"},{"location":"man/manual/#Tracing-1","page":"Manual","title":"Tracing","text":"","category":"section"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"The built-in streamplot function in Matplotlib is not satisfactory for accurately tracing. Instead we recommend FieldTracer.jl for tracing fieldlines and streamlines.","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"An example of tracing in a 2D cut and plot the field lines over contour:","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"using Batsrus, PyPlot\n\nfile = \"test/y=0_var_1_t00000000_n00000000.out\"\nbd = load(file)\n\nbx = bd.w[:,:,5]\nbz = bd.w[:,:,7]\nx  = bd.x[:,1,1]\nz  = bd.x[1,:,2]\n\nseeds = select_seeds(x, z; nSeed=100) # randomly select the seeding points\n\nfor i = 1:size(seeds)[2]\n   xs = seeds[1,i]\n   zs = seeds[2,i]\n   # Tracing in both direction. Check the document for more options.\n   x1, z1 = trace2d_eul(bx, bz, xs, zs, x, z, ds=0.1, maxstep=1000, gridType=\"ndgrid\")\n   plot(x1,z1,\"--\")\nend\naxis(\"equal\")","category":"page"},{"location":"man/manual/#","page":"Manual","title":"Manual","text":"Currently the select_seeds function uses pseudo random number generator that produces the same seeds every time.","category":"page"},{"location":"man/internal/#APIs-1","page":"Internal","title":"APIs","text":"","category":"section"},{"location":"man/internal/#Public-1","page":"Internal","title":"Public","text":"","category":"section"},{"location":"man/internal/#Types-1","page":"Internal","title":"Types","text":"","category":"section"},{"location":"man/internal/#","page":"Internal","title":"Internal","text":"Modules = [Batsrus]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"man/internal/#Batsrus.BATLData","page":"Internal","title":"Batsrus.BATLData","text":"Primary Batsrus data storage type.\n\n\n\n\n\n","category":"type"},{"location":"man/internal/#Functions-1","page":"Internal","title":"Functions","text":"","category":"section"},{"location":"man/internal/#","page":"Internal","title":"Internal","text":"Modules = [Batsrus]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"man/internal/#Batsrus.convertIDLtoVTK-Tuple{AbstractString}","page":"Internal","title":"Batsrus.convertIDLtoVTK","text":"convertIDLtoVTK(filename; gridType=1, verbose=false)\n\nConvert 3D BATSRUS *.out to VTK. If gridType==1, it converts to the rectilinear grid; if gridType==2, it converts to the structured grid. If filename does not end with \"out\", it tries to find the \".info\" and \".tree\" file with the same name tag and generates 3D unstructured VTU file.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.convertTECtoVTU","page":"Internal","title":"Batsrus.convertTECtoVTU","text":"convertTECtoVTU(head, data, connectivity, filename=\"out\")\n\nConvert unstructured Tecplot data to VTK. Note that if using voxel type data in VTK, the connectivity sequence is different from Tecplot: the 3D connectivity sequence in Tecplot is the same as the hexahedron type in VTK, but different with the voxel type. The 2D connectivity sequence is the same as the quad type, but different with the pixel type. For example, in 3D the index conversion is:\n\n# PLT to VTK voxel index_ = [1 2 4 3 5 6 8 7]\nfor i in 1:2\n   connectivity = swaprows!(connectivity, 4*i-1, 4*i)\nend\n\n\n\n\n\n","category":"function"},{"location":"man/internal/#Batsrus.cutdata-Tuple{BATLData, AbstractString}","page":"Internal","title":"Batsrus.cutdata","text":"cutdata(data, var; plotrange=[-Inf,Inf,-Inf,Inf], dir=\"x\", sequence=1)\n\nGet 2D plane cut in orientation dir for var out of 3D box data within plotrange. The returned 2D data lies in the sequence plane from - to + in dir.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.cutplot","page":"Internal","title":"Batsrus.cutplot","text":"cutplot(data, var, ax=nothing; plotrange=[-Inf,Inf,-Inf,Inf], dir=\"x\", sequence=1,\n   levels=20)\n\n2D plane cut contourf of 3D box data.\n\n\n\n\n\n","category":"function"},{"location":"man/internal/#Batsrus.getConnectivity-Tuple{Batl}","page":"Internal","title":"Batsrus.getConnectivity","text":"Get cell connectivity list.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.getdata2d","page":"Internal","title":"Batsrus.getdata2d","text":"getdata2d(bd::BATLData, var::AbstractString, plotrange=[-Inf, Inf, -Inf, Inf],\n   plotinterval=Inf; innermask=false)\n\nReturn 2D slices of data var from bd. If plotrange is not set, output data resolution is the same as the original. If innermask==true, then the inner boundary cells are set to NaN.\n\n\n\n\n\n","category":"function"},{"location":"man/internal/#Batsrus.getvar-Tuple{BATLData, AbstractString}","page":"Internal","title":"Batsrus.getvar","text":"getvars(bd::BATLData, var::AbstractString) -> Array\n\nReturn variable data from string var. This is also supported via direct indexing,\n\nExamples\n\nbd[\"rho\"]\n\nSee also: getvars.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.getvars-Union{Tuple{T}, Tuple{U}, Tuple{BATLData{U}, Vector{T}}} where {U, T<:AbstractString}","page":"Internal","title":"Batsrus.getvars","text":"getvars(bd::BATLData, Names::Vector) -> Dict\n\nReturn variables' data as a dictionary from string vector. See also: getvar.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.load-Tuple{AbstractString}","page":"Internal","title":"Batsrus.load","text":"load(filename; npict=1, verbose=false)\n\nRead BATSRUS output files. Stores the npict snapshot from an ascii or binary data file into the arrays of coordinates x and data w.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.plotdata-Tuple{BATLData, AbstractString}","page":"Internal","title":"Batsrus.plotdata","text":"plotdata(data, func, args, kwargs...)\n\nPlot the variable from SWMF output.\n\nplotdata(data, \"p\", plotmode=\"contbar\")\n\nplotdata(data, \"p\", plotmode=\"grid\")\n\nplotdata(data, func, plotmode=\"trimesh\", plotrange=[-1.0, 1.0, -1.0, 1.0], plotinterval=0.2)\n\nArguments\n\nbd::BATLData: BATSRUS data.\nfunc::String: variables for plotting.\n\nKeywords\n\nplotmode::String: type of plotting [\"cont\",\"contbar\"]...\nplotrange::Vector: range of plotting.\nplotinterval: interval for interpolation.\nlevels: levels of contour.\ninnermask: Bool for masking a circle at the inner boundary.\ndir: 2D cut plane orientation from 3D outputs [\"x\",\"y\",\"z\"].\nsequence: sequence of plane from - to + in that direction.\nmultifigure: 1 for multifigure display, 0 for subplots.\nverbose: display additional information.\ndensity: density for streamlines.\nstride: quiver strides in number of cells.\n\nRight now this can only deal with 2D plots or 3D cuts. Full 3D plots may be supported in the future.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.plotlogdata-Tuple{Any, NamedTuple, AbstractString}","page":"Internal","title":"Batsrus.plotlogdata","text":"plotlogdata(data, head, func; plotmode=\"line\")\n\nPlot information from log file.\n\nInput arguments\n\ndata::Array: output data.\nhead::NamedTuple: header info.\nfunc::String: variables for plotting.\nplotmode::String: type of plotting [\"line\",\"scatter\"].\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.readhead-Tuple{Any}","page":"Internal","title":"Batsrus.readhead","text":"Return header from info file. Currently only designed for 2D and 3D.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.readlogdata-Tuple{AbstractString}","page":"Internal","title":"Batsrus.readlogdata","text":"Read information from log file.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.readtecdata-Tuple{AbstractString}","page":"Internal","title":"Batsrus.readtecdata","text":"readtecdata(file; verbose=false)\n\nReturn header, data and connectivity from BATSRUS Tecplot outputs. Both 2D and 3D binary and ASCII formats are supported.\n\nExamples\n\nfile = \"3d_ascii.dat\"\nhead, data, connectivity = readtecdata(file)\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.readtree-Tuple{Any}","page":"Internal","title":"Batsrus.readtree","text":"Return BATL tree structure.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.showhead","page":"Internal","title":"Batsrus.showhead","text":"showhead(file, filehead)\n\nDisplaying file header information.\n\n\n\n\n\n","category":"function"},{"location":"man/internal/#Batsrus.showhead-Tuple{BATLData}","page":"Internal","title":"Batsrus.showhead","text":"showhead(data)\nshowhead(io, data)\n\nDisplay file information of data.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.streamslice","page":"Internal","title":"Batsrus.streamslice","text":"streamslice(data::BATLData, var, ax=nothing; plotrange=[-Inf,Inf,-Inf,Inf], dir=\"x\",\n   sequence=1; kwargs...)\n\nPlot streamlines on 2D slices of 3D box data. Variable names in var string must be separated with ;.\n\n\n\n\n\n","category":"function"},{"location":"man/internal/#Batsrus.subsurface-NTuple{4, Any}","page":"Internal","title":"Batsrus.subsurface","text":"subsurface(x, y, data, limits)\nsubsurface(x, y, u, v, limits)\n\nExtract subset of 2D surface dataset in ndgrid format. See also: subvolume.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.subvolume-NTuple{5, Any}","page":"Internal","title":"Batsrus.subvolume","text":"subvolume(x, y, z, data, limits)\nsubvolume(x, y, z, u, v, w, limits)\n\nExtract subset of 3D dataset in ndgrid format. See also: subsurface.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#PyPlot.contour","page":"Internal","title":"PyPlot.contour","text":"contour(data, var, ax=nothing; levels=0, plotrange=[-Inf,Inf,-Inf,Inf],\n   plotinterval=0.1, innermask=false, kwargs...)\n\nWrapper over contour in matplotlib.\n\n\n\n\n\n","category":"function"},{"location":"man/internal/#PyPlot.contourf","page":"Internal","title":"PyPlot.contourf","text":"contourf(data, var, ax=nothing; levels=0, plotrange=[-Inf,Inf,-Inf,Inf],\n   plotinterval=0.1, innermask=false, kwargs...)\n\nWrapper over contourf in matplotlib.\n\n\n\n\n\n","category":"function"},{"location":"man/internal/#PyPlot.pcolormesh","page":"Internal","title":"PyPlot.pcolormesh","text":"pcolormesh(data, var, levels=0; ax=nothing, plotrange=[-Inf,Inf,-Inf,Inf],\n   plotinterval=0.1, innermask=false, kwargs...)\n\nWrapper over pcolormesh in matplotlib.\n\n\n\n\n\n","category":"function"},{"location":"man/internal/#PyPlot.plot","page":"Internal","title":"PyPlot.plot","text":"plot(data, var, ax=nothing; kwargs...)\n\nWrapper over plot in matplotlib.\n\n\n\n\n\n","category":"function"},{"location":"man/internal/#PyPlot.plot_surface-Tuple{BATLData, AbstractString}","page":"Internal","title":"PyPlot.plot_surface","text":"plot_surface(data, var; plotrange=[-Inf,Inf,-Inf,Inf], plotinterval=0.1,\n   innermask=false, kwargs...)\n\nWrapper over plot_surface in matplotlib.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#PyPlot.plot_trisurf","page":"Internal","title":"PyPlot.plot_trisurf","text":"plot_trisurf(data::BATLData, var::String, ax=nothing; plotrange=[-Inf,Inf,-Inf,Inf],\n   kwargs...)\n\nWrapper over plot_trisurf in matplotlib.\n\n\n\n\n\n","category":"function"},{"location":"man/internal/#PyPlot.quiver","page":"Internal","title":"PyPlot.quiver","text":"quiver(data, var, ax=nothing; stride=10, kwargs...)\n\nWrapper over quiver in matplotlib. Only supports Cartesian grid for now.\n\n\n\n\n\n","category":"function"},{"location":"man/internal/#PyPlot.scatter","page":"Internal","title":"PyPlot.scatter","text":"scatter(data, var, ax=nothing; kwargs...)\n\nWrapper over scatter in matplotlib.\n\n\n\n\n\n","category":"function"},{"location":"man/internal/#PyPlot.streamplot","page":"Internal","title":"PyPlot.streamplot","text":"streamplot(data, var, ax=nothing; plotrange=[-Inf,Inf,-Inf,Inf], plotinterval=0.1,\n   kwargs...)\n\nWrapper over streamplot in matplotlib .\n\n\n\n\n\n","category":"function"},{"location":"man/internal/#PyPlot.tricontourf","page":"Internal","title":"PyPlot.tricontourf","text":"tricontourf(data, var, ax=nothing; plotrange=[-Inf,Inf,-Inf,Inf], kwargs...)\n\nWrapper over tricontourf in matplotlib.\n\n\n\n\n\n","category":"function"},{"location":"man/internal/#PyPlot.tripcolor","page":"Internal","title":"PyPlot.tripcolor","text":"tripcolor(data, var, levels=0; ax=nothing, plotrange=[-Inf,Inf,-Inf,Inf],\n   plotinterval=0.1, innermask=false, kwargs...)\n\nWrapper over tripcolor in matplotlib.\n\n\n\n\n\n","category":"function"},{"location":"man/internal/#","page":"Internal","title":"Internal","text":"Modules = [UnitfulBatsrus]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"man/internal/#Private-1","page":"Internal","title":"Private","text":"","category":"section"},{"location":"man/internal/#","page":"Internal","title":"Internal","text":"Modules = [Batsrus]\nPublic = false","category":"page"},{"location":"man/internal/#Batsrus.FileList","page":"Internal","title":"Batsrus.FileList","text":"Type for the file information.\n\n\n\n\n\n","category":"type"},{"location":"man/internal/#Batsrus.Head","page":"Internal","title":"Batsrus.Head","text":"BATSRUS output standalone header information.\n\n\n\n\n\n","category":"type"},{"location":"man/internal/#Batsrus._fill_vector_from_scalars-Tuple{BATLData, Any, Any, Any}","page":"Internal","title":"Batsrus._fill_vector_from_scalars","text":"Construct vectors from scalar components.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.allocateBuffer-Tuple{NamedTuple, DataType}","page":"Internal","title":"Batsrus.allocateBuffer","text":"Create buffer for x and w.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.create_pvd-Tuple{String}","page":"Internal","title":"Batsrus.create_pvd","text":"create_pvd(filepattern)\n\nGenerate PVD file for a time series collection of VTK data.\n\nExample\n\ncreate_pvd(\"*.vtu)\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.fillCellNeighbors!-Tuple{Batl, Vararg{Any, 4}}","page":"Internal","title":"Batsrus.fillCellNeighbors!","text":"fillCellNeighbors!(batl, iCell_G, DiLevelNei_III, iNodeNei_III, nBlock_P)\n\nFill neighbor cell indexes for the given block. The faces, edges, and vertices are ordered from left (-) to right (+) in x-y-z sequentially.\n\nVertices:        Edges: (10,11 ignored)\n\n7 ‚Äì‚Äì- 8        . ‚Äì4‚Äì .\n\n.     - .      7 .     8 .\n\n5 ‚Äì‚Äì- 6  .     . ‚Äì3‚Äì .  12 .  .    .  .     .  .    .  . .  3 ‚Äì‚Äì- 4     9  . ‚Äì2‚Äì . . -     . -      . 5     . 6 1 ‚Äì‚Äì- 2        . ‚Äì1‚Äì .\n\nOnly tested for 3D.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.find_grid_block-Tuple{Batl, Any}","page":"Internal","title":"Batsrus.find_grid_block","text":"find_grid_block(batl, xyz_D)\n\nReturn processor local block index that contains a point. Input location should be given in Cartesian coordinates.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.find_neighbor_for_anynode-Tuple{Batl, Int64}","page":"Internal","title":"Batsrus.find_neighbor_for_anynode","text":"Find neighbors for any node in the tree. Only for Cartesian now.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.find_tree_node-Tuple{Batl, Any}","page":"Internal","title":"Batsrus.find_tree_node","text":"find_tree_node(batl, Coord_D)\n\nFind the node that contains a point. The point coordinates should be given in generalized coordinates normalized by the domain size.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.findindex-Tuple{BATLData, AbstractString}","page":"Internal","title":"Batsrus.findindex","text":"Find variable index in the BATSRUS data.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.getSibling-Tuple{Any, Any}","page":"Internal","title":"Batsrus.getSibling","text":"Return sibling index (1-8) for the given block node matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.getascii!-Tuple{Any, Any, IOStream, NamedTuple}","page":"Internal","title":"Batsrus.getascii!","text":"Read ascii format coordinates and data values.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.getbinary!-Tuple{Any, Any, IOStream, NamedTuple}","page":"Internal","title":"Batsrus.getbinary!","text":"Read binary format coordinates and data values.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.getfilehead-Tuple{IOStream, Batsrus.FileList}","page":"Internal","title":"Batsrus.getfilehead","text":"getfilehead(fileID::IoStream, filelist::FileList) -> NameTuple\n\nObtain the header information from BATSRUS output file of type linked to fileID.\n\nInput arguments\n\nfileID::IOStream: file identifier.\nfilelist::FileList: file information.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.getfilesize-Tuple{IOStream, Symbol, Int32}","page":"Internal","title":"Batsrus.getfilesize","text":"Return the size in bytes for one snapshot.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.getfiletype-Tuple{AbstractString}","page":"Internal","title":"Batsrus.getfiletype","text":"Obtain file type.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.ibits-Tuple{Any, Any, Any}","page":"Internal","title":"Batsrus.ibits","text":"Logical shifts as the Fortran instrinsic function.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.meshgrid-Tuple{Any, Any}","page":"Internal","title":"Batsrus.meshgrid","text":"Generating consistent 2D arrays for passing to plotting functions.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.nodeToGlobalBlock-Tuple{Batl, Int32, Any}","page":"Internal","title":"Batsrus.nodeToGlobalBlock","text":"Return global block index for the node.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.order_children!-Tuple{Batl, Int32, Int64, Vector{Int32}}","page":"Internal","title":"Batsrus.order_children!","text":"order_children!(batl::Batl, iNode, iMorton::Int, iNodeMorton_I::Vector{Int32})\n\nRecursively apply Morton ordering for nodes below a root block. Store result into iNodeMortonI and iMortonNodeA using the iMorton index.\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.order_tree-Tuple{Batl}","page":"Internal","title":"Batsrus.order_tree","text":"order_tree(batl)\n\nReturn maximum AMR level in the used block and the Morton curve order. Set iNodeMorton_I indirect index arrays according to\n\nroot node order\nMorton ordering for each root node\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.set_colorbar","page":"Internal","title":"Batsrus.set_colorbar","text":"Set colorbar norm and ticks.\n\n\n\n\n\n","category":"function"},{"location":"man/internal/#Batsrus.setunits-Tuple{Any, Any}","page":"Internal","title":"Batsrus.setunits","text":"setunits(filehead, type; distance=1.0, mp=1.0, me=1.0)\n\nSet the units for the output files. If type is given as \"SI\", \"CGS\", \"NORMALIZED\", \"PIC\", \"PLANETARY\", \"SOLAR\", set typeunit = type, otherwise try to guess from the fileheader. Based on typeunit set units for distance [xSI], time [tSI], density [rhoSI], pressure [pSI], magnetic field [bSI] and current density [jSI] in SI units. Distance unit [rplanet | rstar], ion and electron mass in [amu] can be set with optional distance, mp and me.\n\nAlso calculate convenient constants ti0, cs0 ... for typical formulas. This function is currently not used anywhere!\n\n\n\n\n\n","category":"method"},{"location":"man/internal/#Batsrus.swaprows!-Tuple{Matrix, Int64, Int64}","page":"Internal","title":"Batsrus.swaprows!","text":"Return matrix X with swapped rows i and j.\n\n\n\n\n\n","category":"method"},{"location":"#Batsrus.jl-1","page":"Home","title":"Batsrus.jl","text":"","category":"section"},{"location":"#Overview-1","page":"Home","title":"Overview","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"note: Note\nThis package is still under development, so be careful for any future breaking changes!","category":"page"},{"location":"#","page":"Home","title":"Home","text":"BATSRUS and SWMF data reading, converting, visualizing and analyzing in Julia.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"This package provides the following functionalities:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"simulation data reader\nrun log plots\n2D/3D region cut from the whole data\nphase space distribution plots\ninterpolation from unstructured to structured data\ndata format conversion to VTK\nsimulation data visualization","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The ultimate goal is to build a convenient tool of reading and analyzing simulation outputs which is easy to install and easy to use.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"tip: Ready to use?\nFeel free to contact the author for any help or collaboration!","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Install VisAna from the julia REPL prompt with","category":"page"},{"location":"#","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"Batsrus\")","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Or in the Pkg REPL","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> ]\npkg> add Batsrus","category":"page"},{"location":"#Benchmark-1","page":"Home","title":"Benchmark","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Data loading speed of a 2.4GB 3D binary file, 317MB 3D binary file, and 65KB 2D binary file on Macbook Pro with quad core 2.2 GHz Intel i7 and 16 GB 1600 MHz DDR3:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"2.4GB tmax [s] tmean [s]\nJulia 2.73 1.32\nPython 1.35 1.34\nIDL 6.18 6.08\nMATLAB 16.02 10.60","category":"page"},{"location":"#","page":"Home","title":"Home","text":"317MB tmean [ms]\nJulia 180.8\nPython 179.5\nIDL 453.5\nMATLAB 698.4","category":"page"},{"location":"#","page":"Home","title":"Home","text":"65KB tmean [Œºs]\nJulia 163.36\nPython 4390.95\nIDL 1970.29\nMATLAB 19273.25","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The Julia, IDL, and MATLAB version all shares the same kernel design. The timings are obtained for Julia v1.3.1, Python 3.7.6 + Numpy 1.18.1, IDL 8.5, and MATLAB R2018b. For dynamic languages with JIT, the first time when function gets executed is also the slowest due to runtime compilation, as can be seen from tmax in the tables. spacepy reaches the same level of performance as Batsruls.jl because of the well-optimized numpy library written in C. However, for small data sizes Batsrus.jl is much faster than packages written in other languages.","category":"page"},{"location":"#Calling-From-Python-1","page":"Home","title":"Calling From Python","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"In Python, you can easily take advantage of this package with the aid of JuliaCall or PyJulia.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"With JuliaCall:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"from juliacall import Main as jl\njl.seval(\"using Batsrus\")\nfile = 'test/example.out'\ndata = Batsrus.load(file)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"With PyJulia:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"from julia import Batsrus\nfile = 'test/1d__raw_2_t25.60000_n00000258.out'\ndata = Batsrus.load(file)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"warning: Python dependency\nPyPlot package backend may be affected by the settings of PyJulia dependencies. If you want to set it back properly, you need to recompile the PyCall package in Julia.","category":"page"},{"location":"#Developers-1","page":"Home","title":"Developers","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This package inherits the ideas and code structures from its predecessor in IDL (developed by G√°bor T√≥th) and MATLAB.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Batsrus.jl is developed and maintained by Hongyang Zhou.","category":"page"},{"location":"#Acknowledgments-1","page":"Home","title":"Acknowledgments","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"All the nice guys who share their codes!","category":"page"},{"location":"man/log/#Development-Log-1","page":"Log","title":"Development Log","text":"","category":"section"},{"location":"man/log/#","page":"Log","title":"Log","text":"All the workflows here is not restricted to one type of model output. After being familiar with new ideas and new models, one can easily make use of existing samples and create reader of their own. Because of the embarrassing parallelism nature of postprocessing, it is quite easy to take advantage of parallel approaches to process the data.","category":"page"},{"location":"man/log/#","page":"Log","title":"Log","text":"For the plotting, streamline tracing and particle tracing, a common problem is the grid and related interpolation process. Now I have FieldTracer.jl and TestParticle.jl designed specifically for these tasks.","category":"page"},{"location":"man/log/#Test-Data-1","page":"Log","title":"Test Data","text":"","category":"section"},{"location":"man/log/#","page":"Log","title":"Log","text":"If you don't have SWMF data at hand, Batsrus.jl provides some test data for you to begin with.","category":"page"},{"location":"man/log/#","page":"Log","title":"Log","text":"using LazyArtifacts\n\ndatapath = artifact\"testdata\" # where you can find multiple test data files","category":"page"},{"location":"man/log/#","page":"Log","title":"Log","text":"These are also used in the standard test. These will be automatically downloaded from batsrus_data if you run the package test locally.","category":"page"},{"location":"man/log/#VTK-AMR-Grid-Structure-1","page":"Log","title":"VTK AMR Grid Structure","text":"","category":"section"},{"location":"man/log/#","page":"Log","title":"Log","text":"vtkOverlappingAMR implements a somewhat strict Berger-Collela AMR scheme:","category":"page"},{"location":"man/log/#","page":"Log","title":"Log","text":"All grids are Cartesian.\nGrids at the same level do not overlap.\nThe refinement ratios, RL, between adjacent levels are integer (typically 2 or 4) and uniform within the same level.\nGrid cells are never partially refined; i.e., each cell is refined to four quads in 2D or eight hexahedra in 3D.","category":"page"},{"location":"man/log/#","page":"Log","title":"Log","text":"Or in other words,","category":"page"},{"location":"man/log/#","page":"Log","title":"Log","text":"Refinement ratio across levels is constant.\nEach block at levels > 0 need to be covered 100% by one parent block of","category":"page"},{"location":"man/log/#","page":"Log","title":"Log","text":"previous level.","category":"page"},{"location":"man/log/#","page":"Log","title":"Log","text":"Some other restriction about what happens at the boundary.","category":"page"},{"location":"man/log/#","page":"Log","title":"Log","text":"You can directly use vtkUniformGridAMR, which does not impose any restrictions. Most filters should work for this class - there just wouldn't be any specialized filters such as the dual-grid contour / clip ones for the vtkOverlappingAMR.","category":"page"},{"location":"man/log/#","page":"Log","title":"Log","text":"The vtkAMRInformation documentation consists only of","category":"page"},{"location":"man/log/#","page":"Log","title":"Log","text":"Refinement ratio between AMR levels\nGrid spacing for each level\nThe file block index for each block parent child information, if requested","category":"page"},{"location":"man/log/#","page":"Log","title":"Log","text":"(Image: sample_2DAMR) Sample 2D AMR Dataset with two levels and refinement ratio, RL=4. The root level (L0) consists of a single grid shown in black wireframe while the next level (L1) consists of two grids, depicted in green wireframe and red wireframe respectively. The two grids at L1 are projected from the root level to illustrate that the cells underneath are ‚Äúhidden.‚Äù","category":"page"},{"location":"man/log/#","page":"Log","title":"Log","text":"In VTK, the collection of AMR grids is stored in a vtkHierarchicalBoxDataSet data-structure. Each grid, G(Li,k), is represented by a vtkUniformGrid data structure where the unique key pair (Li,k) denotes the corresponding level (Li) and the grid index within the level (k) with respect to the underlying hierarchical structure. An array historically known as IBLANK, stored as a cell attribute in vtkUniformGrid, denotes whether a cell is hidden or not. The blanking array is subsequently used by the mapper to hide lower resolution cells accordingly when visualizing the dataset.","category":"page"},{"location":"man/log/#","page":"Log","title":"Log","text":"To enable the execution of data queries without loading the entire dataset in memory, metadata information is employed. The metadata stores a minimal set of geometric information for each grid in the AMR hierarchy. Specifically, the AMR metadata, B(Li,k), corresponding to the grid G(Li,k), is represented using a vtkAMRBox object and it consists of the following information:","category":"page"},{"location":"man/log/#","page":"Log","title":"Log","text":"N={Nx, Ny, Nz} ‚Äî the cell dimensions of the grid (since the data is cell-centered)\nThe grid spacing at level L, hL={hx,hy,hz}\nThe grid level Li and grid index k\nThe global dataset origin, X=(X0, Y0, Z0), i.e., the minimum origin from all grids in level L0\nThe LoCorner and HiCorner, which describe the low and high corners of the rectangular region covered by the corresponding grid in a virtual integer lattice with the same spacing (h) that covers the entire domain.","category":"page"},{"location":"man/log/#","page":"Log","title":"Log","text":"(Image: sample_2DAMR)","category":"page"},{"location":"man/log/#","page":"Log","title":"Log","text":"Given the metadata information stored in the AMR box of each grid, the refinement ratio at each level can be easily computed using relationship (1) from Table 1. Further, the cartesian bounds the corresponding grid covers and the number of points and cells is also available (see relationships 2-4 in Table 1). Notably, geometric queries such as determining which cell contains a given point, or if a grid intersects a user-supplied slice plane, can be answered using just the metadata.","category":"page"},{"location":"man/log/#","page":"Log","title":"Log","text":"There is a vtkAMRDualExtractionFilter, which constructs a dual-mesh (i.e., the mesh constructed by connecting the cell-centers) over the computational domain. If we can directly tell ParaView that the mesh we have is a dual-mesh, then the initial trial with multi-block data may work directly.","category":"page"},{"location":"man/log/#","page":"Log","title":"Log","text":"AMRGaussianPulseSource","category":"page"},{"location":"man/log/#","page":"Log","title":"Log","text":"See Multi-Resolution Rendering with Overlapping AMR for the implementation of C++ reader in VTK.","category":"page"}]
}
